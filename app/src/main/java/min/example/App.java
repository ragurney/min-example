/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package min.example;

import io.vavr.collection.List;
import io.vavr.control.Option;
import io.vavr.control.Try;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.concurrent.Callable;
import javax.annotation.Nullable;
import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.exec.PumpStreamHandler;


public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println("HELLOOOOOO");

        String wd = rootPath();

        List<String> results = grep("^\\s*public void\\s+(testAppHasAGreeting)\\(\\).*", "*Test.java", wd);

        System.out.println(results);
        System.out.println(new App().getGreeting());
    }

    public static List<String> grep(String regex, String filePattern, String wd) {
        CommandLine commandLine = CommandLine.parse("git");
        commandLine.addArgument("--no-pager");
        commandLine.addArgument("grep");
        commandLine.addArgument("--line-number");
        commandLine.addArgument("--untracked");
        commandLine.addArgument("--extended-regexp");
        commandLine.addArgument(regex);
        commandLine.addArgument("--");
        commandLine.addArgument(filePattern);

        System.out.println(commandLine);

        return List.of(runCommand(commandLine, wd).split("\n"));
    }

    public static String rootPath() {
        CommandLine commandLine = CommandLine.parse("git");
        commandLine.addArgument("rev-parse");
        commandLine.addArgument("--show-toplevel");
        String result = runCommand(commandLine, null);

        return result.trim();
    }

    public static String runCommand(CommandLine cmdLine, @Nullable String workingDirectory) {
        // Execute the command line and capture the output.
        DefaultExecutor executor = new DefaultExecutor();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        executor.setStreamHandler(new PumpStreamHandler(outputStream));

        Option.of(workingDirectory).peek((wd) -> executor.setWorkingDirectory(new File(wd)));

        System.out.println("WD:::  " + workingDirectory);

        Integer exitCode =
            Try.of(() -> executor.execute(cmdLine))
                .getOrElseThrow(
                    (e) -> {
                        System.out.println(outputStream.toString());
                        throw new RuntimeException(e);
                    });

        // Process the output of the command.
        return outputStream.toString();
    }
}
